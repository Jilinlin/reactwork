{"version":3,"sources":["ToDoInput.js","ToDoing.js","ToDoList.js","index.js"],"names":["TodoInput","handleInput","e","keyCode","target","value","props","add","className","onKeyDown","this","type","placeholder","Component","ToDoing","todoList","doing","id","map","item","index","done","key","onClick","change","title","del","checked","readOnly","Todolist","addItem","data","todo","setState","state","changeItem","delItem","splice","JSON","parse","localStorage","getItem","setItem","stringify","forEach","ReactDOM","render","document","getElementById"],"mappings":"sOAEqBA,E,2MAEjBC,YAAc,SAACC,GACO,KAAdA,EAAEC,SAAqC,KAAnBD,EAAEE,OAAOC,QAC7B,EAAKC,MAAMC,IAAIL,EAAEE,OAAOC,OACxBH,EAAEE,OAAOC,MAAQ,K,wEAKrB,OAEI,yBAAKG,UAAU,WAEX,yBAAKA,UAAU,SAAf,YAEA,2BAAOC,UAAWC,KAAKT,YAAaU,KAAK,OAAOC,YAAY,0B,GAhBrCC,aCAlBC,E,iLACP,IAAD,OACCC,EAAaL,KAAKJ,MAAlBS,SACN,OACI,6BAEI,uDAAQ,8BAAOL,KAAKJ,MAAMU,QAE1B,wBAAIC,GAAG,SAEHF,EAASG,KAAI,SAACC,EAAMC,GAChB,OAAkB,IAAdD,EAAKE,KAED,wBAAIC,IAAKF,GACL,2BAAOT,KAAK,WAAWY,QAAS,kBAAI,EAAKjB,MAAMkB,OAAOJ,MACtD,2BAAID,EAAKM,OACT,uBAAGF,QAAS,kBAAI,EAAKjB,MAAMoB,IAAIN,KAA/B,MAIL,OAMf,uDAAQ,8BAAOV,KAAKJ,MAAMe,OAE1B,wBAAIJ,GAAG,QAEHF,EAASG,KAAI,SAACC,EAAMC,GAChB,OAAkB,IAAdD,EAAKE,KAED,wBAAIC,IAAKF,GACL,2BAAOT,KAAK,WAAWY,QAAS,kBAAI,EAAKjB,MAAMkB,OAAOJ,IAAQO,QAAQ,UAAUC,UAAQ,IACxF,2BAAIT,EAAKM,OACT,uBAAGF,QAAS,kBAAI,EAAKjB,MAAMoB,IAAIN,KAA/B,MAIL,Y,GAxCMP,aCKhBgB,G,kBAEjB,aAAe,IAAD,uBACV,+CAaJC,QAAU,SAACC,GACP,IAAIC,EAAO,CAAC,MAASD,EAAM,MAAQ,GACnC,EAAKE,SAAS,CACVlB,SAAS,GAAD,mBAAM,EAAKmB,MAAMnB,UAAjB,CAA2BiB,OAjB7B,EAqBdG,WAAa,SAACf,GACV,IAAIL,EAAQ,YAAO,EAAKmB,MAAMnB,UAC9BA,EAASK,GAAOC,MAAQN,EAASK,GAAOC,KACxC,EAAKY,SAAS,CACVlB,SAAUA,KAzBJ,EA6BdqB,QAAU,SAAChB,GACP,IAAIL,EAAQ,YAAO,EAAKmB,MAAMnB,UAC9BA,EAASsB,OAAOjB,EAAO,GACvB,EAAKa,SAAS,CACVlB,SAAUA,KA/Bd,IAAIiB,EAAOM,KAAKC,MAAMC,aAAaC,QAAQ,SAFjC,OAIN,EAAKP,MADI,OAATF,EACa,CACTjB,SAAU,IAGD,CACTA,SAAUiB,GATR,E,sEAuCVQ,aAAaE,QAAQ,OAAQJ,KAAKK,UAAUjC,KAAKwB,MAAMnB,WACvD,IAAIC,EAAQ,EACRK,EAAO,EAWX,OARAX,KAAKwB,MAAMnB,SAAS6B,SAAQ,SAACzB,IACP,IAAdA,EAAKE,KACLL,IAEAK,OAKJ,6BACI,yBAAKb,UAAU,UACX,kBAAC,EAAD,CAAWD,IAAKG,KAAKoB,WAEzB,yBAAKtB,UAAU,WACX,kBAAC,EAAD,CAASgB,OAAQd,KAAKyB,WAAYT,IAAKhB,KAAK0B,QAASrB,SAAUL,KAAKwB,MAAMnB,SAAUC,MAAOA,EAAOK,KAAMA,U,GA5DtFR,cCDtCgC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,U","file":"static/js/main.6da3eba6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    // 按下回车键，添加ToDo\n    handleInput = (e) => {\n        if (e.keyCode === 13 && e.target.value !== '') {\n            this.props.add(e.target.value);\n            e.target.value = '';\n        }\n    }\n\n    render() {\n        return (\n            // 顶部整体\n            <div className=\"section\">\n                {/* Logo */}\n                <div className=\"label\">ToDoList</div>\n                {/* 输入框 */}\n                <input onKeyDown={this.handleInput} type=\"text\" placeholder=\"添加ToDo\"/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class ToDoing extends Component {\n    render() {\n        var { todoList } = this.props;\n        return (\n            <div>\n                {/* 正在进行 */}\n                <h2>正在进行<span>{this.props.doing}</span></h2>\n\n                <ol id=\"doing\">\n                {\n                    todoList.map((item, index) => {\n                        if (item.done === false) {\n                            return (\n                                <li key={index}>\n                                    <input type=\"checkbox\" onClick={()=>this.props.change(index)}/>\n                                    <p>{item.title}</p>\n                                    <a onClick={()=>this.props.del(index)}>-</a>\n                                </li>\n                            )\n                        }\n                        return '';\n                    })\n                }\n                </ol>\n\n                {/* 已经完成 */}\n                <h2>已经完成<span>{this.props.done}</span></h2>\n\n                <ul id=\"done\">\n                {\n                    todoList.map((item, index) => {\n                        if (item.done === true) {\n                            return (\n                                <li key={index}>\n                                    <input type=\"checkbox\" onClick={()=>this.props.change(index)} checked=\"checked\" readOnly/>\n                                    <p>{item.title}</p>\n                                    <a onClick={()=>this.props.del(index)}>-</a>\n                                </li>\n                            )\n                        }\n                        return '';\n                    })\n                } \n                </ul>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n// 引入输入框组件\nimport ToDoInput from './ToDoInput'\n// 引入输出框组件\nimport ToDoing from './ToDoing'\nimport './ToDoList.css';\n\nexport default class Todolist extends Component {\n    \n    constructor() {\n        super();//将父类的this传递给子类\n        let todo = JSON.parse(localStorage.getItem('todo'));\n        if (todo === null) {\n            this.state = {\n                todoList: []\n            }\n        } else {\n            this.state = {\n                todoList: todo\n            }\n        }\n    }\n    // 增加元素\n    addItem = (data) => {\n        let todo = {\"title\": data, \"done\": false}\n        this.setState({\n            todoList: [...this.state.todoList, todo]\n        })\n    }\n    // 改变元素\n    changeItem = (index) => {\n        let todoList = [...this.state.todoList];\n        todoList[index].done = !todoList[index].done;\n        this.setState({\n            todoList: todoList\n        })\n    }\n    // 删除元素\n    delItem = (index) => {\n        let todoList = [...this.state.todoList];\n        todoList.splice(index, 1);\n        this.setState({\n            todoList: todoList\n        });\n    }\n\n    render() {\n        // 更新localStorage\n        localStorage.setItem('todo', JSON.stringify(this.state.todoList));\n        let doing = 0;\n        let done = 0;\n\n        // 获取正在进行和已完成的数量\n        this.state.todoList.forEach((item) => {\n            if (item.done === false) {\n                doing++;\n            } else {\n                done++;\n            }\n        });\n\n        return (\n            <div>\n                <div className=\"header\">\n                    <ToDoInput add={this.addItem}/>\n                </div>\n                <div className=\"section\">\n                    <ToDoing change={this.changeItem} del={this.delItem} todoList={this.state.todoList} doing={doing} done={done}/>\n                </div>\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDoList from './ToDoList';\n\n//引入组件\nReactDOM.render(<ToDoList/>, document.getElementById('root'));"],"sourceRoot":""}